commit 6f08e6a3995d1bed4e837889a3945b6dc650f6ad
Author: Eduard Bloch <blade@debian.org>
Date:   Thu Jun 19 23:10:28 2014 +0200

    Option to have a custom message body

Index: apt-cacher-ng/include/job.h
===================================================================
--- apt-cacher-ng.orig/include/job.h
+++ apt-cacher-ng/include/job.h
@@ -81,7 +81,7 @@ class job {
 
       const char * BuildAndEnqueHeader(const fileitem::FiStatus &fistate, const off_t &nGooddataSize, header& respHead);
       fileitem::FiStatus _SwitchToPtItem(const mstring &fileLoc);
-      void SetErrorResponse(const char * errorLine, const char *szLocation=NULL);
+      void SetErrorResponse(const char * errorLine, const char *szLocation=NULL, const char *bodytext=NULL);
       void HandleLocalDownload(const mstring &visPath,
     			const mstring &fsBase, const mstring &fsSubpath);
 
Index: apt-cacher-ng/source/job.cc
===================================================================
--- apt-cacher-ng.orig/source/job.cc
+++ apt-cacher-ng/source/job.cc
@@ -710,7 +710,8 @@ report_overload:
     return ;
 
 report_notallowed:
-	SetErrorResponse((tSS() << "403 Forbidden file type or location: " << sReqPath).c_str());
+	SetErrorResponse((tSS() << "403 Forbidden file type or location: " << sReqPath).c_str(),
+			NULL, "403 Forbidden file type or location");
 //    USRDBG( sRawUriPath + " -- ACCESS FORBIDDEN");
     return ;
 
@@ -1137,26 +1138,28 @@ fileitem::FiStatus job::_SwitchToPtItem(
 }
 
 
-void job::SetErrorResponse(const char * errorLine, const char *szLocation)
+void job::SetErrorResponse(const char * errorLine, const char *szLocation, const char *bodytext)
 {
 	LOGSTART2("job::SetErrorResponse", errorLine << " ; for " << m_sOrigUrl);
 	class erroritem: public tGeneratedFitemBase
 	{
 	public:
-		erroritem(const string &sId, const char *szError) : tGeneratedFitemBase(sId, szError)
+		erroritem(const string &sId, const char *szError, const char *bodytext)
+			: tGeneratedFitemBase(sId, szError)
 		{
 			if(BODYFREECODE(m_head.getStatus()))
 				return;
 			// otherwise do something meaningful
 			m_data << "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n"
-				"<html><head><title>" << szError << "</title>\n</head>\n<body><h1>"
-				<< szError << "</h1></body></html>";
+				"<html><head><title>" << (bodytext ? bodytext : szError)
+				<< "</title>\n</head>\n<body><h1>"
+				<< (bodytext ? bodytext : szError) << "</h1></body></html>";
 			m_head.set(header::CONTENT_TYPE, "text/html");
 			seal();
 		}
 	};
 
-	erroritem *p = new erroritem("noid", errorLine);
+	erroritem *p = new erroritem("noid", errorLine, bodytext);
 	p->HeadRef().set(header::LOCATION, szLocation);
 	m_pItem.ReplaceWithLocal(p);;
 	//aclog::err(tSS() << "fileitem is now " << uintptr_t(m_pItem.get()));
