Requirements:

 - Linux or mostly POSIX.1-2001 compliant environment
 - CMake 2.6.2 or newer, probably also GNU make
 - gcc 4.7 or newer or clang 3.0 or newer and latest libstdc++ or Boost headers
 - on Linux systems, kernel 2.6.22 or newer and glibc 2.8 or newer

Optional development packages for optional features:
 - zlib, libbz2, liblzma (from XZ), openssl and their development components
 - recent FUSE library and its development files for the "virtual mirror"
   filesystem

Build and installation instructions:

CMake is used internally for build control. It can be run in the source
directory and provides the usual configuration options. However, the
recommended way are out-of-source builds in a subdirectory like build/ that can
be removed to restart from scratch.  There are two convenience scripts that
automate this, build.sh and distclean.sh.
Workflow example:
 - run ./build.sh to configure and build (extra options are passed as cmake
   arguments, build results go to the build/ directory)
 - chdir to build and run "make install" (maybe with DESTDIR=/somewhere/else)

Troubleshooting and integrator notes:
 - on configuration problems or to change most settings afterwards, remove the
   build directory or build/CMakeCache.txt
 - Link Time Optimization may be broken with some compilers. if a GCC "internal
   compiler error" appears, first try -DUSE_LTO=off
 - -DDOCDIR=... and -DLIBDIR=... specify target directories for docs resp.
   supplmentary files
 - Install halibut tool to rebuild the documentation, if needed

Configure to run on system startup:

This heavily depends on the used init system.
 - For systemd configuration files example, visit systemd directory and install
   that config files as needed (check the services and tmpfiles directories of
   your systemd setup).
 - For sysvinit, see latest Debian package for examples (unpack with ar/tar or
   just mc).
 - For use with Avahi, install contrib/apt-cacher-ng.service configuration
   file.

Configuration:

 - create a directory for cached files and for log files
 - set ownership and directory permissions in a way which allows 
   read/write/mkdir actions to the user account used to run apt-cacher-ng later
 - copy conf directory to /etc/apt-cacher-ng or similar location. 
 - adapt acng.conf and other *.conf files in that configuration directory. 
   See user manual (doc/apt-cacher-ng.pdf or doc/README) for instructions.
 - run apt-cacher-ng -c yourConfigurationDirectory
 - visit Command-and-Control web interface of apt-cacher-ng, link can be found
   among other instructions at http://yourHostName:portNumber/ , which might be
   http://localhost:3142/ with the default configuration
 - for apt clients, there is a config snipped in contrib/10-apt-cacher-ng.conf
   which might be installed into /etc/apt/apt.conf.d/.

Developer notes:

There are some macros and shortcuts:
 - scripts/Makefile.dev has some test and release rules
 - DEBUG argument of build.sh adds more verbosity and implicitly sets compiler
   defaults to produce debuggable binaries
 - -DDEBUG (set by above) to enable verbose debug logging. BE WARNED: this
   spams a lot and makes logs explode.
 - Certain environment variables influence cmake, like CXX (compiler to use),
   CXXFLAGS (compiler options, buid.sh won't set cmake defaults if this is
   set), LDFLAGS (compiler flags for linking)
